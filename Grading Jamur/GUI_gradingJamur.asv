function varargout = GUI_gradingJamur(varargin)
% GUI_GRADINGJAMUR MATLAB code for GUI_gradingJamur.fig
%      GUI_GRADINGJAMUR, by itself, creates a new GUI_GRADINGJAMUR or raises the existing
%      singleton*.
%
%      H = GUI_GRADINGJAMUR returns the handle to a new GUI_GRADINGJAMUR or the handle to
%      the existing singleton*.
%
%      GUI_GRADINGJAMUR('CALLBACK',hObject,eventData,handles,...) calls the local
%      function named CALLBACK in GUI_GRADINGJAMUR.M with the given input arguments.
%
%      GUI_GRADINGJAMUR('Property','Value',...) creates a new GUI_GRADINGJAMUR or raises the
%      existing singleton*.  Starting from the left, property value pairs are
%      applied to the GUI before GUI_gradingJamur_OpeningFcn gets called.  An
%      unrecognized property name or invalid value makes property application
%      stop.  All inputs are passed to GUI_gradingJamur_OpeningFcn via varargin.
%
%      *See GUI Options on GUIDE's Tools menu.  Choose "GUI allows only one
%      instance to run (singleton)".
%
% See also: GUIDE, GUIDATA, GUIHANDLES

% Edit the above text to modify the response to help GUI_gradingJamur

% Last Modified by GUIDE v2.5 09-Jan-2023 06:00:50

% Begin initialization code - DO NOT EDIT
gui_Singleton = 1;
gui_State = struct('gui_Name',       mfilename, ...
    'gui_Singleton',  gui_Singleton, ...
    'gui_OpeningFcn', @GUI_gradingJamur_OpeningFcn, ...
    'gui_OutputFcn',  @GUI_gradingJamur_OutputFcn, ...
    'gui_LayoutFcn',  [] , ...
    'gui_Callback',   []);
if nargin && ischar(varargin{1})
    gui_State.gui_Callback = str2func(varargin{1});
end

if nargout
    [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
else
    gui_mainfcn(gui_State, varargin{:});
end
% End initialization code - DO NOT EDIT


% --- Executes just before GUI_gradingJamur is made visible.
function GUI_gradingJamur_OpeningFcn(hObject, eventdata, handles, varargin)
% This function has no output args, see OutputFcn.
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
% varargin   command line arguments to GUI_gradingJamur (see VARARGIN)

% Choose default command line output for GUI_gradingJamur
handles.output = hObject;

% Update handles structure
guidata(hObject, handles);
movegui(hObject,"center");

% UIWAIT makes GUI_gradingJamur wait for user response (see UIRESUME)
% uiwait(handles.figure1);


% --- Outputs from this function are returned to the command line.
function varargout = GUI_gradingJamur_OutputFcn(hObject, eventdata, handles)
% varargout  cell array for returning output args (see VARARGOUT);
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Get default command line output from handles structure
varargout{1} = handles.output;


% --- Executes on button press in pushbutton1.
function pushbutton1_Callback(hObject, eventdata, handles)
[filename,pathname] = uigetfile( ...
    {'*.bmp;*.jpg;*.tif;*.png','Files of type (*.bmp,*.jpg,*.tif,*.png)';
    '*.bmp','File Bitmap (*.bmp)';...
    '*.jpg','File jpeg (*.jpg)';
    '*.tif','File Tif (*.tif)';
    '*.png','File PNG (*.png)'},...
    'Open Image');
if ~isequal(filename,0)
    handles.img = imread(fullfile(pathname,filename));
    [rows, columns, channel] = size(handles.img);
    if channel > 1
        handles.img_gray = rgb2gray(handles.img);
        axes(handles.axes1);
        cla('reset');
        imshow(handles.img);
        title('Citra Asli', 'Color','w');

        % 	Menyimpan nama file citra pada edit text
        set(handles.edit1, 'String', filename);

        axes(handles.axes2);
        cla('reset');
        imshow(handles.img_gray);
        title('Citra Grayscale', 'Color','w');
    else
        handles.img_gray = handles.img;
        axes(handles.axes1);
        cla('reset');
        imshow(handles.img);
        title('Citra Asli', 'Color','w');

        % 	Menyimpan nama file citra pada edit text
        set(handles.edit1, 'String', filename);

        uiwait(msgbox("Citra sudah grayscale","Notice","modal"));
        axes(handles.axes2);
        cla('reset');
        imshow(handles.img);
        title('Citra Grayscale', 'Color','w');
    end
    axes(handles.axes3);
    cla('reset');
    set(gca,'XTick',[]);
    set(gca,'YTick',[]);
    %     set(gca,'color','#28293d');
    guidata(hObject,handles);
    % set(handles.pushbutton2,'Enable','on')
else
    return;
end


% --- Executes on button press in pushbutton2.
function pushbutton2_Callback(hObject, eventdata, handles)
cam_device = webcamlist;
ListCam = (cam_device);
menu_cam = menus('Pilih Video Input:',ListCam);
if isempty(ListCam)||menu_cam==0
    clear('VidObj');
    msgbox({'Tidak ada Video Input yang terdeteksi'})
    return
end

VidObj = webcam(menu_cam);
handles.VidObj = VidObj;
axes(handles.axes1);
hImage=image(zeros(720,1280,1),'Parent', handles.axes1);
preview(handles.VidObj, hImage);
set(handles.pushbutton9,'Visible', 'On');
guidata(hObject,handles);


% --- Executes on button press in pushbutton3.
function pushbutton3_Callback(hObject, eventdata, handles)
edge_final = handles.edgesImg;
Img = handles.img;
axes(handles.axes3);
cla reset
imshow(edge_final)
title('Deteksi Tepi','Color','w');

% Tentukan nilai tengah baris dan kolom
center_row = (480 + 1) / 2;
center_col = (640 + 1) / 2;

h = drawellipse('Center',[center_col,center_row],'SemiAxes',[220,220], ...
    'RotationAngle',0,'StripeColor','m');
mask = createMask(h);
image = imresize(edge_final,.5);  %-- make image smaller
m = imresize(mask,.5);  %     for fast computation
bw = region_seg(image, m, 1500); %-- Run segmentation
bw = imresize(bw, [size(Img,1) size(Img,2)]);
bw = imfill(bw,'holes');
bw = bwareaopen(bw,1000);
bw = imclearborder(bw);
axes(handles.axes3);
cla reset
imshow(bw)
title('Hasil','Color','w');
axis off
hold on
[c,~] = bwboundaries(bw,'noholes');

for k = 1:length(c)
    boundary = c{k};
    plot(boundary(:,2), boundary(:,1),'y','LineWidth',3)
end
hold off

%melakukan ekstraksi ciri warna RGB
R = Img(:,:,1); %red
G = Img(:,:,2); %green
B = Img(:,:,3); %blue
R(~bw) = 0;
G(~bw) = 0;
B(~bw) = 0;
RGB = cat(3,R,G,B);
axes(handles.axes4);
cla reset
imshow(RGB)

handles.bw = bw;
guidata(hObject, handles)


% --- Executes on button press in pushbutton4.
function pushbutton4_Callback(hObject, eventdata, handles)
bw = handles.bw;
[tinggi, lebar] = size(bw);
hasil = 0;
for p = 1 : tinggi
    for q = 1 : lebar
        if bw(p, q) == 1
            hasil = hasil + 1;
        end
    end
end
area_bw = hasil;
diameter_bw = sqrt(4 * area_bw / pi);
res = 2.715;
area = area_bw/(res^2)/100;
diameterr = diameter_bw/res/10;
handles.diameter = diameterr;
guidata(hObject, handles)

set(handles.edit3,'String',[num2str(area),' cm2']);
set(handles.edit4,'String',[num2str(diameterr),' cm']);


% --- Executes on button press in pushbutton5.
function pushbutton5_Callback(hObject, eventdata, handles)
diameterr = handles.diameter;
if diameterr < 5
    set(handles.edit2,'String',' Grade C');
elseif diameterr >= 5 && diameterr <= 10
    set(handles.edit2,'String',' Grade B');
else
    set(handles.edit2,'String',' Grade A');
    set(handles.edit2,'ForegroundColor',[0.01, 0.48, 0.28]);
end


% --- Executes on button press in pushbutton7.
function pushbutton7_Callback(hObject, eventdata, handles)
try
    delete(handles.VidObj);
catch
end

axes(handles.axes1)
cla('reset')
set(gca,'XTick',[])
set(gca,'YTick',[])
% set(gca, 'Color', '#28293d');
axes(handles.axes2);
cla('reset');
set(gca,'XTick',[]);
set(gca,'YTick',[]);
% set(gca,'color','#28293d');
axes(handles.axes3);
cla('reset');
set(gca,'XTick',[]);
set(gca,'YTick',[]);
% set(gca,'color','#28293d');
axes(handles.axes4);
cla('reset');
set(gca,'XTick',[]);
set(gca,'YTick',[]);
% set(gca,'color','#28293d');
set(handles.edit1, 'String', '');
set(handles.edit2, 'String', '-');
set(handles.edit3, 'String', '');
set(handles.edit4, 'String', '');
set(handles.edit5, 'String', '');
set(handles.pushbutton9,'Visible', 'Off');

function edit1_Callback(hObject, eventdata, handles)
% hObject    handle to edit1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of edit1 as text
%        str2double(get(hObject,'String')) returns contents of edit1 as a double


% --- Executes during object creation, after setting all properties.
function edit1_CreateFcn(hObject, eventdata, handles)
% hObject    handle to edit1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function edit2_Callback(hObject, eventdata, handles)
% hObject    handle to edit2 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of edit2 as text
%        str2double(get(hObject,'String')) returns contents of edit2 as a double


% --- Executes during object creation, after setting all properties.
function edit2_CreateFcn(hObject, eventdata, handles)
% hObject    handle to edit2 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function edit3_Callback(hObject, eventdata, handles)
% hObject    handle to edit3 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of edit3 as text
%        str2double(get(hObject,'String')) returns contents of edit3 as a double


% --- Executes during object creation, after setting all properties.
function edit3_CreateFcn(hObject, eventdata, handles)
% hObject    handle to edit3 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function edit4_Callback(hObject, eventdata, handles)
% hObject    handle to edit4 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of edit4 as text
%        str2double(get(hObject,'String')) returns contents of edit4 as a double


% --- Executes during object creation, after setting all properties.
function edit4_CreateFcn(hObject, eventdata, handles)
% hObject    handle to edit4 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function edit5_Callback(hObject, eventdata, handles)
% hObject    handle to edit5 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of edit5 as text
%        str2double(get(hObject,'String')) returns contents of edit5 as a double


% --- Executes during object creation, after setting all properties.
function edit5_CreateFcn(hObject, eventdata, handles)
% hObject    handle to edit5 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function edit6_Callback(hObject, eventdata, handles)
% hObject    handle to edit6 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of edit6 as text
%        str2double(get(hObject,'String')) returns contents of edit6 as a double


% --- Executes during object creation, after setting all properties.
function edit6_CreateFcn(hObject, eventdata, handles)
% hObject    handle to edit6 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


% --- Executes on button press in pushbutton6.
function pushbutton6_Callback(hObject, eventdata, handles)
img = handles.img_gray;
%Deteksi Tepi
[output] = edge_canny(img);
edge_final = output;

% Tampilkan gambar
axes(handles.axes3)
cla('reset')
imshow(edge_final)
% title('Citra Hasil Deteksi Tepi','Color','white')
title('Deteksi Tepi','Color','w');
handles.edgesImg = edge_final;
guidata(hObject, handles)


% --- Executes on button press in pushbutton9.
function pushbutton9_Callback(hObject, eventdata, handles)
cam = handles.VidObj;
img = snapshot(cam);
% img = imresize(img, [480,640]);
img = imresize(img, [800,1280]);
counter = 1;
baseDir = '../Grading Jamur/Data_learning';
baseName = 'Dataset_';
newName = fullfile(baseDir, sprintf('%s%d.jpg', baseName, counter));
while exist(newName,'file')
    counter = counter + 1;
    newName = fullfile(baseDir, sprintf('%s%d.jpg', baseName, counter));
end
imwrite(img, newName);

try
    delete(handles.VidObj);
catch
end


gray = rgb2gray(img);
handles.img_gray = gray;
handles.img = img;

axes(handles.axes1);
imshow(img)
title('Citra Asli', 'Color','w');
axes(handles.axes2);
imshow(handles.img_gray)
title('Citra Grayscale', 'Color','w');
set(handles.pushbutton9,'Visible', 'Off');
guidata(hObject,handles);


% --- Executes on button press in pushbutton19.
function pushbutton19_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton19 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)


% --- Executes on button press in pushbutton15.
function pushbutton15_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton15 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)


% --- Executes on button press in pushbutton16.
function pushbutton16_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton16 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)


% --- Executes on button press in pushbutton17.
function pushbutton17_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton17 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)


% --- Executes on button press in pushbutton18.
function pushbutton18_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton18 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)


% --- Executes on button press in pushbutton13.
function pushbutton13_Callback(hObject, eventdata, handles)
Img = im2double(handles.img);
Img_gray = handles.img_gray;

%konversi citra Grayscale menjadi citra biner
    bw = imbinarize(Img_gray);
    %     figure, imshow(bw)

    %melakukan operasi morfologi untuk menyempurnakan hasil segmentasi
    %1. filling holes
    bw = imfill(bw,'holes');
    %figure, imshow(bw)
    %2. area opening
    bw = bwareaopen(bw,1000);
    %figure, imshow(bw)

    %melakukan ekstraksi ciri warna RGB
    R = Img(:,:,1); %red
    G = Img(:,:,2); %green
    B = Img(:,:,3); %blue
    R(~bw) = 0;
    G(~bw) = 0;
    B(~bw) = 0;
    %RGB = cat(3,R,G,B);
    %figure, imshow(RGB)

    Red = sum(sum(R))/sum(sum(bw));
    Green = sum(sum(G))/sum(sum(bw));
    Blue = sum(sum(B))/sum(sum(bw));

    %melakukan ekstraksi ciri warna HSV
    HSV = rgb2hsv(Img);
    %figure, imshow(HSV)

    H = HSV(:,:,1); %hue
    S = HSV(:,:,2); %saturation
    V = HSV(:,:,3); %value
    H(~bw) = 0;
    S(~bw) = 0;
    V(~bw) = 0;

    Hue = sum(sum(H))/sum(sum(bw));
    Saturation = sum(sum(S))/sum(sum(bw));
    Value= sum(sum(V))/sum(sum(bw));

    %melakukan ekstraksi ciri tekstur GLCM
    Img_gray(~bw) = 0;
    %membentuk matriks kookurensi
    GLCM = graycomatrix(Img_gray,'Offset',[0 1; -1 1; -1 0; -1 -1]);
    stats = graycoprops(GLCM,{'Contrast','Correlation','Energy','Homogeneity'});
    Contrast = mean(stats.Contrast);
    Correlation = mean(stats.Correlation);
    Energy = mean(stats.Energy);
    Homogeneity= mean(stats.Homogeneity);

    %mengisi variabel ciri uji dengan ciri hasil ekstraksi
    ciri_uji(1,1) = Red;
    ciri_uji(1,2) = Green;
    ciri_uji(1,3) = Blue;
    ciri_uji(1,4) = Hue;
    ciri_uji(1,5) = Saturation;
    ciri_uji(1,6) = Value;
    ciri_uji(1,7) = Contrast;
    ciri_uji(1,8) = Correlation;
    ciri_uji(1,9) = Energy;
    ciri_uji(1,10) = Homogeneity;


    %memanggil nilai bobot jaringan
    load('Mdl.mat')

    %membaca kelas keluaran
    kelas_keluaran = predict(Mdl,ciri_uji);

    %mengubah nilai keluaran menjadi kelas keluaran
    switch kelas_keluaran
        case 1
            kelas_keluaran = 'Putih Kekuningan';
        case 2
            kelas_keluaran = 'Putih';
    end

    %tampilkan citra asli dan kelas keluaran hasil pengujian
    set(handles.edit5,'String', kelas_keluaran);


% --- Executes on button press in pushbutton14.
function pushbutton14_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton14 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)



function edit9_Callback(hObject, eventdata, handles)
% hObject    handle to edit9 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of edit9 as text
%        str2double(get(hObject,'String')) returns contents of edit9 as a double


% --- Executes during object creation, after setting all properties.
function edit9_CreateFcn(hObject, eventdata, handles)
% hObject    handle to edit9 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end
